{$DEFINE PEAKTOP:IDE/ERP/CONFIG2/RPTI/49CC8564-C6C0-4E88-905F-C4B7F120B0B2/DEFAULT.PS}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/RPTI/FORMRPTI.INC}         {$I PEAKTOP:IDE/ERP/DBO/RPTI/FORMRPTI.INC}         {$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/INPUT/DATEPERIOD/INTF.INC} {$I PEAKTOP:IDE/ERP/DBO/INPUT/DATEPERIOD/INTF.INC} {$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/INPUT/REF/INTF.INC}        {$I PEAKTOP:IDE/ERP/DBO/INPUT/REF/INTF.INC}        {$ENDIF}
const
  objname_datefrom   = 'dtpDateFrom';
  objname_dateto     = 'dtpDateTo';
  objname_sort       = 'rgSort';
  msg_sort           = 'Сортировать прайс';
  msg_sort_ctgr      = 'По категории';
  msg_sort_brand     = 'По марке продажи';
  msg_sort_group     = 'По группе';
  //============================================================================
  procedure TERPFormRpti_actRefEdt_OnExecute(Sender :TObject);
  begin
    with TERPForm_ActiveDataSet(TComponent(Sender).Owner) do
      begin
      if not Active then exit;
      if not(RecordCount>0)then exit;
      if(FieldByName('ID').AsInteger = 0)then exit;
      SetGlobalVariable('TMC_ID', FieldByName('ID').AsString);
      call(StrAbsolutePath('../../REF/TMC/DEFAULT_ITEM.PS', ScriptName));
      end;
  end;
  //============================================================================
  function TERPFormRpti_GetExportFilter(aOwner:TComponent):string;
  begin
    Result := '';
  end;
  //============================================================================
  function TERPFormRpti_OnGetSQL(aOwner:TComponent;var aSQL:string):Boolean;
  begin
    Result := False; // default handler
  end;
  //============================================================================
  procedure TERPFormRpti_OnGetSQLFileName(aOwner:TComponent;var aFileName:string);
  begin
     // do nothing, default handler
  end;
  //============================================================================
  procedure TERPFormRpti_OnProcessParams(aOwner:TComponent;aQr :TxFBQuery);
  var
    lkSQL :string;
  begin
    lkSQL := aQR.SQL.Text;
    with TxcRadioGroup(aOwner.FindComponent(objname_sort)) do
      case ItemIndex of
        0:begin
          lkSQL := StrReplaceStr(lkSQL, '/*ORDER*/', 'TC.ORDERID, TC.NAME, ');
          lkSQL := StrReplaceStr(lkSQL, '/*SORT*/' , 
                      '    REPORT_ID   = :TMC_CTGR_ID; '+SQLCRLF+
                      '    REPORT_NAME = :TMC_CTGR_NAME;'+SQLCRLF 
                   );
          end;
        1:begin
          lkSQL := StrReplaceStr(lkSQL, '/*ORDER*/', 'TB.ORDERID, TB.NAME, ');
          lkSQL := StrReplaceStr(lkSQL, '/*SORT*/' , 
                      '    REPORT_ID   = :TMC_BRAND_ID; '+SQLCRLF+
                      '    REPORT_NAME = :TMC_BRAND_NAME;'+SQLCRLF 
                   );
          end;
        2:begin
          lkSQL := StrReplaceStr(lkSQL, '/*ORDER*/', 'TG.PATH, ');
          lkSQL := StrReplaceStr(lkSQL, '/*SORT*/' , 
                      '    REPORT_ID   = :TMC_GROUP_ID; '+SQLCRLF+
                      '    REPORT_NAME = :TMC_GROUP_PATH;'+SQLCRLF 
                   );
          end;
        3:begin
          lkSQL := StrReplaceStr(lkSQL, '/*ORDER*/', 'TC.ORDERID, TB.ORDERID, TC.NAME, TB.NAME, ');
          lkSQL := StrReplaceStr(lkSQL, '/*SORT*/' , 
                      '    REPORT_ID   = :TMC_CTGR_ID; '+SQLCRLF+
                      '    REPORT_NAME = :TMC_CTGR_NAME;'+SQLCRLF 
                   );
          end;
        4:begin
          lkSQL := StrReplaceStr(lkSQL, '/*ORDER*/', 'TB.ORDERID, TC.ORDERID, TB.NAME, TC.NAME, ');
          lkSQL := StrReplaceStr(lkSQL, '/*SORT*/' , 
                      '    REPORT_ID   = :TMC_BRAND_ID; '+SQLCRLF+
                      '    REPORT_NAME = :TMC_BRAND_NAME;'+SQLCRLF 
                   );
          end;
      end;
    aQR.SQL.Text := lkSQL;
    with aQr do
      begin
      ParamByName('PQ_TMC_GROUP_ID').AsString := '1';
      end;  
  end;
  //============================================================================
  procedure TERPFormRpti_OnChart(aOwner:TComponent; aParent:TWinControl);
  var
    lkPC :TxcPageControlEx;
    lkTS :TxcTabSheet;
  begin
    aParent.Free;
    exit;
    lkPC := CreateTxcPageControlEx(aOwner, aParent, 'PCCharts', 0,0,600,600, alClient);
    lkPC.MultiLine := false;
    TxcPageControlEx_ActivateDefaultPage(lkPC);
  end;
  //============================================================================
  procedure TERPFormRpti_OnTerms(aOwner:TComponent;aParent:TWinControl);
  var
    lkLastTop :Integer;
    lkRG      :TxcRadioGroup;
  begin
    lkLastTop := 4;
    lkRG      := TxcRadioGroup.Create(aOwner);
    with lkRG do
      begin
      Name         := objname_sort;
      Parent       := aParent;
      Left         := 4;
      Top          := lkLastTop;
      Height       := 200;
      Width        := 360;
      StyleManager := Amunhotep.MainForm.StyleManager;
      Caption      := msg_sort;
      with Items do
        begin
        Clear;
        Add(msg_sort_ctgr);
        Add(msg_sort_brand);
        Add(msg_sort_group);
        Add(msg_sort_ctgr  + ', ' + msg_sort_brand);
        Add(msg_sort_brand + ', ' + msg_sort_ctgr);
        end;
      ItemIndex := 3;  
      end;
    lkLastTop := lkRG.Height + 4;  
  end;
  //============================================================================
  function TERPFormRpti_OnColumnsCreate(aOwner:TComponent; aDBG:TDBGridEh):Boolean;
  begin
    Result := false; // default handler
  end;
  //============================================================================
  procedure TERPFormRpti_Columns_OnEditButtonClick(Sender :TObject; var Handled :Boolean);
  var
    lkDBG    :TDBGridEh;
    lkTypes  :string;
    lkPlace  :string;
    lkScript :string;
  begin
    Handled := true;
    lkDBG   := TDBGridEh(TComponent(Sender).Owner.Owner);
    if not lkDBG.DataSource.DataSet.Active then exit;
  end;
  //============================================================================
  procedure TERPFormRpti_OnColumnsCreated(aOwner:TComponent; aDBG:TDBGridEh);
  var
    lkToolBar :TxcGradientPanelVista;
    i :Integer; 
  begin
    lkToolBar := TxcGradientPanelVista(aOwner.FindComponent(obj_name_erp_toolbar_nav));
    TERPForm_CreateAction(aOwner,'actRefEdt'   ,'Редактировать','Редактировать карточку'    ,'',0,468,@TERPFormRpti_actRefEdt_OnExecute   ,@TERPFormRpti_actPrintGrid_OnUpdate,lkToolBar,nil);
    lkToolBar.Width      := TWinControl_AutoWidth(lkToolBar)+2;
    aDBG.OnDblClick      := @TERPFormRpti_actRefEdt_OnExecute;
  end;
  //============================================================================
  procedure TERPFormRpti_OnColumnsLoad(aOwner:TComponent; aDBG:TDBGridEh);
  begin
    // do nothing, default handler
  end;
  //============================================================================
  function TERPFormRpti_OnPrint(aOwner:TComponent):Boolean;
  begin
    Result := false; // default handler
  end;
  //============================================================================
  procedure TERPFormRpti_BeforePreview(aOwner:TComponent; aRpt:TxReport);
  begin
    // do nothing, default handler
  end;
  //============================================================================
begin
  TERPFormRpti_Create('{49CC8564-C6C0-4E88-905F-C4B7F120B0B2}');
end.
