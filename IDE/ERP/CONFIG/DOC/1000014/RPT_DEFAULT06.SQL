EXECUTE BLOCK (
  Q_J_ID TYPE OF COLUMN TABL$J_4.ID = ?J_ID
 ,Q_FLAG TYPE OF COLUMN TABL$J_4.ID = ?FLAG
)RETURNS (
   J_ID                   TYPE OF COLUMN TABL$D_1000014.J_ID
  ,ID                 TYPE OF COLUMN TABL$D_1000014.TMC_ID
  ,TMC_LIST_ID            TYPE OF COLUMN TABL$R_TMC.TMC_LIST_ID
  ,NAME               TYPE OF COLUMN TABL$R_TMC.NAME
  ,NAME2              TYPE OF COLUMN TABL$R_TMC.NAME2
  ,ARTICLE                TYPE OF COLUMN TABL$R_TMC.ARTICLE
  ,NUMSHOW            TYPE OF COLUMN TABL$R_TMC.NUMSHOW
  ,BARCODE                TYPE OF COLUMN TABL$R_TMC.BARCODE
  ,VEDCODE            TYPE OF COLUMN TABL$R_TMC.VEDCODE
  ,MODELNAME          TYPE OF COLUMN TABL$R_TMC.MODELNAME
  ,EDIZM_ID           TYPE OF COLUMN TABL$R_TMC.EDIZM_ID
  ,EDIZM_ID_        TYPE OF COLUMN TABL$R_EDIZM.SHORT_NAME
  ,TMC_GROUP_ID           TYPE OF COLUMN TABL$R_TMC.TMC_GROUP_ID
  ,TMC_GROUP_NAME         TYPE OF COLUMN TABL$R_TMC_GROUP.NAME
  ,PRICE                  TYPE OF COLUMN TABL$D_1000014.PRICE
  ,QUANT                  TYPE OF COLUMN TABL$D_1000014.QUANT
  ,TOTAL                  TYPE OF COLUMN TABL$D_1000014.PRICE
)AS
  DECLARE VARIABLE P_FIRM_ID TYPE OF COLUMN TABL$J_4.FIRM_ID;
  DECLARE VARIABLE P_I       TYPE OF COLUMN TABL$J_4.ID;
BEGIN
  FOR
    SELECT  DB.J_ID, DB.TMC_ID
           ,TMC.NAME, TMC.NAME2, TMC.ARTICLE, TMC.NUMSHOW, TMC.BARCODE, TMC.VEDCODE, TMC.MODELNAME
           ,TMC.EDIZM_ID, E.SHORT_NAME
           ,TMC.TMC_GROUP_ID, TG.NAME
           ,DB.PRICE_TMC, DB.QUANT, (DB.PRICE * DB.QUANT) AS TOTAL
    FROM   TABL$D_1000014 DB, TABL$R_TMC TMC, TABL$R_EDIZM E, TABL$R_TMC_GROUP TG
    WHERE  (DB.J_ID = :Q_J_ID)
      AND  (TMC.ID  = DB.TMC_ID)
      AND  (E.ID    = TMC.EDIZM_ID)
      AND  (TG.ID   = TMC.TMC_GROUP_ID)
    ORDER BY DB.ID  
    INTO    :J_ID, :ID
           ,:NAME, :NAME2, :ARTICLE, :NUMSHOW, :BARCODE, :VEDCODE, :MODELNAME
           ,:EDIZM_ID, :EDIZM_ID_
           ,:TMC_GROUP_ID, :TMC_GROUP_NAME
           ,:PRICE, :QUANT, :TOTAL
  DO
    BEGIN
    IF(:Q_FLAG = 0)THEN
      BEGIN 
      SUSPEND;
      END
    ELSE
      BEGIN
      IF(:QUANT > 0)THEN
        BEGIN
        P_I = 0;
        WHILE(:P_I < :QUANT)DO
          BEGIN  
          SUSPEND;
          P_I = :P_I + 1;
          END
        END
      END  
    END
END
