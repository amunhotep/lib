{$IFNDEF PEAKTOP:OBJ/TXCDBLABEL.INC}                       {$I PEAKTOP:OBJ/TXCDBLABEL.INC}                       {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TLABEL.INC}                           {$I PEAKTOP:OBJ/TLABEL.INC}                           {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TXCEDITCALC.INC}                      {$I PEAKTOP:OBJ/TXCEDITCALC.INC}                      {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TXCEDITCOMBO.INC}                     {$I PEAKTOP:OBJ/TXCEDITCOMBO.INC}                     {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TCOMBOBOX.INC}                        {$I PEAKTOP:OBJ/TCOMBOBOX.INC}                        {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TXFBDATASETS.INC}                     {$I PEAKTOP:OBJ/TXFBDATASETS.INC}                     {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TDBGRIDEH.INC}                        {$I PEAKTOP:OBJ/TDBGRIDEH.INC}                        {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TCOLUMNEH.INC}                        {$I PEAKTOP:OBJ/TCOLUMNEH.INC}                        {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TXCSTDPANEL.INC}                      {$I PEAKTOP:OBJ/TXCSTDPANEL.INC}                      {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TXCGRADIENTPANEL.INC}                 {$I PEAKTOP:OBJ/TXCGRADIENTPANEL.INC}                 {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TXCGRADIENTPANELVISTA.INC}            {$I PEAKTOP:OBJ/TXCGRADIENTPANELVISTA.INC}            {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TSPLITTER.INC}                        {$I PEAKTOP:OBJ/TSPLITTER.INC}                        {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TXCBUTTON.INC}                        {$I PEAKTOP:OBJ/TXCBUTTON.INC}                        {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TSCROLLBOX.INC}                       {$I PEAKTOP:OBJ/TSCROLLBOX.INC}                       {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TXCPAGECONTROLEX.INC}                 {$I PEAKTOP:OBJ/TXCPAGECONTROLEX.INC}                 {$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TXCTABSHEET.INC}                      {$I PEAKTOP:OBJ/TXCTABSHEET.INC}                      {$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/SHORTCUTS.INC}                {$I PEAKTOP:IDE/ERP/DBO/SHORTCUTS.INC}                {$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/$COMMON/FORMERP_LANG.INC}     {$I PEAKTOP:IDE/ERP/DBO/$COMMON/FORMERP_LANG.INC}     {$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/$COMMON/FORMERP.INC}          {$I PEAKTOP:IDE/ERP/DBO/$COMMON/FORMERP.INC}          {$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/USERS/GLOBALVARIABLES.INC}    {$I PEAKTOP:IDE/ERP/DBO/USERS/GLOBALVARIABLES.INC}    {$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/USERS/RIGHTS.INC}             {$I PEAKTOP:IDE/ERP/DBO/USERS/RIGHTS.INC}             {$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/DBGRID/ACTIONS.INC}           {$I PEAKTOP:IDE/ERP/DBO/DBGRID/ACTIONS.INC}           {$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/OPER/DIALOGQUANT.INC}         {$I PEAKTOP:IDE/ERP/DBO/OPER/DIALOGQUANT.INC}         {$ENDIF}
{$IFNDEF PEAKTOP:IDE/ERP/DBO/REF/DIALOGCASEREFITEM.02.INC} {$I PEAKTOP:IDE/ERP/DBO/REF/DIALOGCASEREFITEM.02.INC} {$ENDIF}

const
  DefaultButtonWidth  = 120;
  DefaultButtonHeight = 48;
  DefaultItemWidth    = 200;
  DefaultItemHeight   = 64;
  DefaultClickHeight  = 24;
  CorporateColor      = $02338C; // DaVinci
var
  MaterialColors :array[0..9]of Integer;
  //============================================================================
  function MaterialColor(const anIndex: Integer): Integer;
  var
    LIndex :Integer;
  begin
    LIndex := anIndex;
    if(LIndex >= Length(MaterialColors) )then
      LIndex := anIndex mod Length(MaterialColors);
    Result := MaterialColors[LIndex];
  end;
  //============================================================================
  procedure TERPFormGrid_CloseDataSets(aOwner :TComponent);
  var
    lkSettings :TStrings;
  begin
    lkSettings := TERPForm_Settings(aOwner);
    if(TERPForm_TransactionMain(aOwner).InTransaction)then
      begin
      with TERPForm_DataSetMain(aOwner) do
        if Active then
          begin
          if(State <> dsBrowse)then
            try
              Post;
            except
              Cancel;
            end;
          Close;   
          end;
      TERPForm_TransactionMain(aOwner).Commit;
      end;
  end;
  //============================================================================
  procedure TERPFormGrid_CloseDataSetsChilds(aDataSet :TDataSet);
  var
    i :Integer;
  begin
    for i:=0 to aDataSet.ComponentCount-1 do
      if ObjectInheritsFrom(aDataSet.Components[i], 'TDataSet')then
        with TDataSet(aDataSet.Components[i]) do
          if Active then 
            begin
            if(State <> dsBrowse)then
              try
                Post;
              except
                Cancel;
              end;
            Close;
            end;
  end;
  //============================================================================
  procedure TERPFormGrid_OpenDataSetsChilds(aDataSet :TDataSet);
  var
    i :Integer;
  begin
    for i:=0 to aDataSet.ComponentCount-1 do
      if ObjectInheritsFrom(aDataSet.Components[i], 'TDataSet')then
        with TDataSet(aDataSet.Components[i]) do
          if not Active then try Open; except end;
  end;
  //============================================================================
  procedure TERPFormDocEditor_RefreshView(aOwner :TComponent);
  begin
    TERPFormGrid_CloseDataSets(aOwner);
    with TERPForm_DataSetMain(aOwner) do
      begin
      SelectSQL.Text  := 'SELECT P.* FROM PROC$D_1000014('+TERPForm_Settings(aOwner).Values[ERP_DATASET_DBKEY]+') P';
      RefreshSQL.Text := 'SELECT P.* FROM PROC$D_1000014(?ID) P';
      try
        Open;
      except
      end;
      end;
  end;
  //============================================================================
  function TERPFormDocEditor_CommitCheck(Sender :TObject):Boolean;
  var
    lkFlag    :string;
    lkID      :string;
  begin
    Result := False;
    with TERPForm_DataSetMain(TComponent(Sender).Owner) do
      begin
      if not Active then exit;
      lkID := FieldByName('ID').AsString;
      end;
    lkFlag := '0';
    GetField(FBDataBase, 'TABL$J_4', 'FLAG_COMMIT', 'ID = '+lkID, lkFlag);
    if(lkFlag <> '0')then
      begin
      TERPFormDocEditor_RefreshView(TComponent(Sender).Owner);
      Dialogs.MessageDlg('Невозможно выполнить операцию, счёт уже проведен !', mtWarning, [mbOk]);
      exit;
      end;
    Result := True;    
  end;
  //============================================================================
  procedure TERPFormDocEditor_TMCInsert(aOwner :TComponent);
  var
    lkDBG   :TDBGridEh;
    lkQuant :Extended;
    lkStr   :string;
  begin
    with TERPForm_DataSetMain(aOwner)do
      begin
      if(FieldByName('FLAG_COMMIT').AsInteger <> 0)then exit;
      end;
    lkDBG := TDBGridEh(aOwner.FindComponent(obj_name_erp_data_dbgdata+'TMC'));
    lkQuant := 1.000;
    if not ERPDialogQuant_Execute('Добавить ТМЦ', 
        'Введите количество '+SQLCRLF+
         lkDBG.DataSource.DataSet.FieldByName('NAME').AsString, 
         False, lkQuant)then exit;
    lkStr := 
      'EXECUTE BLOCK AS '+SQLCRLF+
      '  DECLARE VARIABLE P_FLAGPOINTS TYPE OF COLUMN TABL$D_1000014.ID; '+SQLCRLF+
      '  DECLARE VARIABLE P_D_ID       TYPE OF COLUMN TABL$D_1000014.ID; '+SQLCRLF+
      'BEGIN '+SQLCRLF+
      '  INSERT INTO TABL$D_1000014(J_ID, TMC_ID, PRICE_TMC, PRICE, QUANT)VALUES('+
        TERPForm_Settings(aOwner).Values[ERP_DATASET_DBKEY]+', '+
        lkDBG.DataSource.DataSet.FieldByName('ID').AsString+', '+
        StrReplaceStr(lkDBG.DataSource.DataSet.FieldByName('PRICE').AsString, ',','.')+', '+
        StrReplaceStr(lkDBG.DataSource.DataSet.FieldByName('PRICE').AsString, ',','.')+', '+
        StrReplaceStr(FormatFloat('#0.000', lkQuant), ',','.')+
        ') '+SQLCRLF+
      '  RETURNING ID INTO :P_D_ID; '+SQLCRLF+
      'END';
    TERPForm_ExecSQL([], lkStr);
    TERPFormDocEditor_RefreshView(aOwner);
  end;
  //============================================================================
  procedure TERPFormDocEditor_itmMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
  begin
    TxcStdPanel(Sender).BorderStyle       := xbsRaized;
    TxcStdPanel(Sender).Colors.Background := Amunhotep.MainForm.StyleManager.Colors.Border;
  end;
  //============================================================================
  procedure TERPFormDocEditor_itmMouseLeave(Sender: TObject);
  begin
    TxcStdPanel(Sender).BorderStyle       := xbsNone;
    TxcStdPanel(Sender).Colors.Background := Amunhotep.MainForm.StyleManager.Colors.Background;
  end;
  //============================================================================
  procedure TERPFormDocEditor_itmMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
  begin
    TxcStdPanel(Sender).BorderStyle := xbsLowered;
    TxcStdPanel(Sender).Color       := TxcStdPanel(Sender).Color xor $202020;
  end;
  //============================================================================
  procedure TERPFormDocEditor_itmMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
  begin
    TxcStdPanel(Sender).BorderStyle := xbsNone;
    TxcStdPanel(Sender).Color       := TxcStdPanel(Sender).Color xor $202020;
  end;
  //============================================================================
  procedure TERPFormDocEditor_itmLblMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
  begin
    TERPFormDocEditor_itmMouseDown(TComponent(Sender).Owner, Button, Shift, X, Y);
  end;
  //============================================================================
  procedure TERPFormDocEditor_itmLblMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
  begin
    TERPFormDocEditor_itmMouseUp(TComponent(Sender).Owner, Button, Shift, X, Y);
  end;
  //============================================================================
  procedure TERPFormDocEditor_itmLblMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
  begin
    TERPFormDocEditor_itmMouseMove(TComponent(Sender).Owner, Shift, X, Y);
  end;
  //============================================================================
  procedure TERPFormDocEditor_itmLblMouseLeave(Sender: TObject);
  begin
    TERPFormDocEditor_itmMouseLeave( TComponent(Sender).Owner );
  end;
  //============================================================================
  procedure TERPFormDocEditor_itmLblClick(Sender :TObject);
  begin
    if ObjectInheritsFrom(TComponent(Sender).Owner, 'TxcStdPanel')then
      TxcStdPanel( TComponent(Sender).Owner ).OnClick(TComponent(Sender).Owner);
  end;
  //============================================================================
  function TERPFormDocEditor_ItemNew(aOwner:TComponent; aParent:TWinControl; 
             const aName, aCaption, aHint, aCaptionLeftTop, aCaptionLeftBottom:string; 
             const aAlign :TAlign; const aAlignment:TAlignment; const aLayout :TTextLayout;
             const aLeft, aTop, aHeight, aWidth :Integer; const aBorderStyle:TxcBorderStyle;
             const aColor:TColor; aOnClick :TNotifyEvent;
             const aCreateLabel:Boolean; const aFontSize:Integer
             ):TxcStdPanel;
  begin
    Result := CreateTxcStdPanel(aOwner, aParent, aName, aCaption, aAlign, aLeft, aTop, aHeight, aWidth, aBorderStyle);
    with Result do
      begin
      StyleManager:= nil;
      Color       := aColor;
      OnClick     := aOnClick;
      OnMouseDown := @TERPFormDocEditor_itmMouseDown;
      OnMouseUp   := @TERPFormDocEditor_itmMouseUp;
      end;
    if aCreateLabel then  
      with CreateTLabel(Result, Result, aCaption, 1, 1, Result.Height, Result.Width, alClient, aAlignment) do
        begin
        Font.Color  := Amunhotep.MainForm.StyleManager.Colors.Window;
        Font.Size   := aFontSize;
        Font.Style  := [fsBold];
        Hint        := aHint;
        Layout      := aLayout;
        ShowHint    := True;
        Transparent := True;
        WordWrap    := True;
        OnClick     := @TERPFormDocEditor_itmLblClick;
        OnMouseDown := @TERPFormDocEditor_itmLblMouseDown;
        OnMouseUp   := @TERPFormDocEditor_itmLblMouseUp;
        OnMouseMove := @TERPFormDocEditor_itmLblMouseMove;
        OnMouseLeave:= @TERPFormDocEditor_itmLblMouseLeave;
        end;
    if(StrTrimAll(aCaptionLeftTop)<>'')then
      with CreateTLabel(Result, Result, aCaptionLeftTop, 1, 1, 12, Result.Width, alNone, taLeftJustify) do
        begin
        Anchors     := [akLeft, akTop, akRight];
        Font.Size   := 7;
        Font.Color  := Amunhotep.MainForm.StyleManager.Colors.Window - $102020;
        OnClick     := @TERPFormDocEditor_itmLblClick;
        OnMouseDown := @TERPFormDocEditor_itmLblMouseDown;
        OnMouseUp   := @TERPFormDocEditor_itmLblMouseUp;
        end;
    if(StrTrimAll(aCaptionLeftBottom)<>'')then
      with CreateTLabel(Result, Result, aCaptionLeftBottom, 1, Result.Height-14, 12, Result.Width, alNone, taLeftJustify) do
        begin
        Anchors     := [akLeft, akBottom, akRight];
        Font.Color  := Amunhotep.MainForm.StyleManager.Colors.Window - $102020;
        Font.Size   := 7;
        Font.Style  := [fsBold];
        WordWrap    := True;
        Transparent := True;
        OnClick     := @TERPFormDocEditor_itmLblClick;
        OnMouseDown := @TERPFormDocEditor_itmLblMouseDown;
        OnMouseUp   := @TERPFormDocEditor_itmLblMouseUp;
        end;
  end;
  //============================================================================
  procedure TERPFormDocEditor_RefreshViewTMC(aOwner :TComponent);
  begin
    with TxFBTransaction(aOwner.FindComponent(obj_name_erp_data_trmain+'TMC')) do
      begin
      if InTransaction then
        Commit;
      with TxFBDataSet(FindComponent(obj_name_erp_data_dtsmain+'TMC')) do
        begin
        SelectSQL.Text := 
          'SELECT TMC.ID, TMC.NAME, TMC.NAME2, TMC.FLAG_DELETE, TMC.FLAG_LOCKED '+SQLCRLF+
          '      ,TMC.ARTICLE, TMC.NUMSHOW, TMC.BARCODE, TMC.TMC_LIST_ID '+SQLCRLF+
          '      ,TMC.EDIZM_ID, EE.NAME AS EDIZM_NAME, EE.SHORT_NAME AS EDIZM_SHORT_NAME '+SQLCRLF+
          '      ,TMC.TMC_GROUP_ID, GG.NAME AS TMC_GROUP_NAME, GG.PATH AS TMC_GROUP_PATH '+SQLCRLF+
          '      ,TMC.TMC_TYPE_ID, TT.NAME AS TMC_TYPE_NAME '+SQLCRLF+
          '      ,TMC.TMC_BRAND_ID, BB.NAME AS TMC_BRAND_NAME '+SQLCRLF+
          '      ,PP.VALUE_DATE, PP.PRICE, PP.PRICE_IN '+SQLCRLF+
          '      ,PP.PRICE_1, PP.PRICE_2, PP.PRICE_3, PP.PRICE_4, PP.PRICE_5 '+SQLCRLF+
          'FROM   TABL$R_TMC TMC '+SQLCRLF+
          '         LEFT OUTER JOIN TABL$R_EDIZM      EE ON (EE.ID = TMC.EDIZM_ID) '+SQLCRLF+
          '         LEFT OUTER JOIN TABL$R_TMC_GROUP  GG ON (GG.ID = TMC.TMC_GROUP_ID) '+SQLCRLF+
          '         LEFT OUTER JOIN TABL$R_TMC_TYPES  TT ON (TT.ID = TMC.TMC_TYPE_ID) '+SQLCRLF+
          '         LEFT OUTER JOIN TABL$R_TMC_BRANDS BB ON (BB.ID = TMC.TMC_BRAND_ID) '+SQLCRLF+
          '         LEFT OUTER JOIN TABL$R_TMC_P      PP ON (PP.TMC_ID     = TMC.ID) '+SQLCRLF+
          '                                              AND(PP.VALUE_DATE = TMC.VALUE_DATE) '+SQLCRLF+
          'WHERE (TMC.FLAG_DELETE  = 0) '+SQLCRLF+
          //'  AND (TMC.FLAG_LOCKED  <> 1) '+SQLCRLF+
          '  AND (TMC.TMC_GROUP_ID <> 10) '+SQLCRLF+
          '  AND (TMC.TMC_LIST_ID  = 0) '+SQLCRLF+
          'ORDER BY GG.PATH, TMC.NAME '+SQLCRLF+
          '';
        try Open; except end;  
        end;
      end;
  end;
  //============================================================================
  procedure TERPFormDocEditor_dtsData_AfterOpen(DataSet :TDataSet);
  var
    i :Integer;
  begin
    TERPFormGrid_OpenDataSetsChilds(DataSet);
    TERPForm_SetCaption(DataSet.Owner.Owner, DataSet.FieldByName('DOCNUMBERSTR').AsString+
      '  '+DataSet.FieldByName('FILIAL_NAME').AsString+'  '+DataSet.FieldByName('USER_ID').AsString+' ('+DataSet.FieldByName('USER_NAME').AsString+')'
    );
    if(DataSet.FieldByName('FLAG_COMMIT').AsInteger = 1)then
      with DataSet.Owner.Owner do
        for i:=0 to ComponentCount-1 do
          begin
          if( (Pos(UpperCase(obj_name_erp_data_dbgdata), UpperCase(Components[i].Name)) = 1) and ObjectInheritsFrom(Components[i],'TDBGridEh') )then
            begin
            TDBGridEh(Components[i]).Enabled := False; 
            end;
          if( (Pos('P_', UpperCase(Components[i].Name)) = 1) and ObjectInheritsFrom(Components[i],'TxcStdPanel') )then
            begin
            TxcStdPanel(Components[i]).Color   := Amunhotep.MainForm.StyleManager.Colors.Background;
            TxcStdPanel(Components[i]).Enabled := False;
            end;
          end;
  end;
  //============================================================================
  procedure TERPFormDocEditor_dtsData_BeforeClose(DataSet :TDataSet);
  begin
    TERPFormGrid_CloseDataSetsChilds(DataSet);
  end;
  //============================================================================
  procedure TERPFormDocEditor_DoCommit(aOwner :TComponent);
  begin
    TERPFormDocEditor_RefreshView(aOwner);
    if not (Dialogs.MessageDlg('Провести документ ?', mtConfirmation, [mbYes, mbNo]) = mrYes)then exit;
    TERPForm_ExecSQL([], 'UPDATE TABL$J_4 J SET J.FLAG_COMMIT = 1 WHERE (J.ID = '''+TERPForm_Settings(aOwner).Values[ERP_DATASET_DBKEY]+''')');
    TERPFormDocEditor_RefreshView(aOwner);
  end;
  //============================================================================
  procedure TERPFormDocEditor_actRefresh_OnExecute(Sender :TObject);
  begin
    TERPFormDocEditor_RefreshView(TComponent(Sender).Owner);
  end;
  //============================================================================
  procedure TERPFormDocEditor_act_Commit_OnExecute(Sender :TObject);
  begin
    TERPFormDocEditor_DoCommit(TComponent(Sender).Owner);
  end;
  //============================================================================
  procedure TERPFormDocEditor_actCommit_OnUpdate(Sender :TObject);
  var
    lkEnabled :Boolean;
  begin
    with TERPForm_DataSetMain(TComponent(Sender).Owner) do
      begin
      lkEnabled := Active;
      if lkEnabled then lkEnabled   := (RecordCount > 0);
      if lkEnabled then lkEnabled   := (FieldByName('FLAG_COMMIT').AsInteger = 0);
      TCustomAction(Sender).Enabled := lkEnabled;
      end;
  end;
  //============================================================================
  procedure TERPFormDocEditor_act_TMCDel_OnExecute(Sender :TObject);
  var
    lkSQL  :string;
    i      :Integer;
    lkDBG  :TDBGridEh;
  begin
    if not TERPFormDocEditor_CommitCheck(Sender) then exit;
    lkDBG := TDBGridEh(TComponent(Sender).Owner.FindComponent(obj_name_erp_data_dbgdata));
    with lkDBG.DataSource.DataSet do
      begin
      if not Active then exit;  
      if not(RecordCount>0)then exit;  
      if(Dialogs.MessageDlg('Удалить выбранные позиции из документа ?',mtConfirmation, [mbYes, mbNo]) <> mrYes)then exit;
      end;
    if(lkDBG.SelectedRows.Count > 0)then
      begin
      lkDBG.DataSource.DataSet.DisableControls;
      lkDBG.SaveBookMark; 
      lkSQL := 'DELETE FROM TABL$D_1000014 D WHERE (D.ID IN ('+lkDBG.DataSource.DataSet.FieldByName('ID').AsString;
      for i:=0 to lkDBG.SelectedRows.Count-1 do
        begin
        lkDBG.DataSource.DataSet.Bookmark := lkDBG.SelectedRows[i];
        lkSQL := lkSQL + ', '+lkDBG.DataSource.DataSet.FieldByName('ID').AsString;
        end;
      lkSQL := lkSQL + ') ); ';
      lkDBG.RestoreBookMark; 
      lkDBG.DataSource.DataSet.EnableControls;
      end
     else 
      lkSQL := 'DELETE FROM TABL$D_1000014 D WHERE (D.ID = '''+lkDBG.DataSource.DataSet.FieldByName('ID').AsString+''')';
    TERPFormGrid_CloseDataSets(TComponent(Sender).Owner);
    TERPForm_ExecSQL([], lkSQL);
    TERPFormDocEditor_RefreshView(TComponent(Sender).Owner);
  end;
  //============================================================================
  procedure TERPFormDocEditor_act_CS_OnExecute(Sender :TObject);
  var
    lkID, lkName, lkJ_ID :string;
  begin
    if not TERPFormDocEditor_CommitCheck(Sender) then exit;
    lkJ_ID := TERPForm_Settings(TComponent(Sender).Owner).Values[ERP_DATASET_DBKEY];    
    lkID   := TERPForm_DataSetMain(TComponent(Sender).Owner).FieldByName('CS_ID').AsString;
    if not ERPDialogCaseReferenceItem03_Execute('TABL$R_CS', 'R.CS_GROUP_ID = 1000005', 'Выберите поставщика', lkID) then exit;
    TERPFormGrid_CloseDataSets(TComponent(Sender).Owner);
    TERPForm_ExecSQL([], 'UPDATE TABL$J_1000014 J SET J.CS_ID = '+lkID+' WHERE (J.J_ID = '''+lkJ_ID+''')');
    TERPFormDocEditor_RefreshView(TComponent(Sender).Owner);
  end;
  //============================================================================
  procedure TERPFormDocEditor_act_TMCIns_OnExecute(Sender :TObject);
  begin
    TERPFormDocEditor_TMCInsert(TComponent(Sender).Owner);
  end;
  //============================================================================
  procedure TERPFormDocEditor_act_Print_OnExecute(Sender :TObject);
  var
    lkJ_ID :string;
  begin
    lkJ_ID := TERPForm_Settings(TComponent(Sender).Owner).Values[ERP_DATASET_DBKEY];    
    TERPFormDocEditor_RefreshView(TComponent(Sender).Owner);
    SetGlobalVariable('J_ID', lkJ_ID);
    call(StrAbsolutePath('./PRINTEX.PS', ScriptName));
  end;
  //============================================================================
  procedure TERPFormDocEditor_actPrint_OnUpdate(Sender :TObject);
  begin
  end;
  //============================================================================
  procedure TERPFormDocEditor_dbgData_OnGetCellParams(Sender:TObject; Column:TColumnEh; AFont: TFont; var Background:TColor; State:TGridDrawState);
  begin
    if(Column.Tag = 666)then exit;
    if(not(Column.Field.DataSet.Active))then exit;
    if(Column.Field.DataSet.RecordCount = 0)then exit;
  end;
  //============================================================================
  procedure TERPFormDocEditor_dbgData_OnKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
  begin
    if(Shift = [ssCtrl])then
      begin
      if(Key = $2E {VK_DELETE})then TERPFormDocEditor_act_TMCDel_OnExecute(Sender);
      end; 
  end;
  //============================================================================
  procedure TERPFormDocEditor_dbgTMC_OnKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
  begin
    if(Shift = [])then
      begin
      if(Key = $0D {VK_RETURN})then TERPFormDocEditor_act_TMCIns_OnExecute(Sender);
      end; 
  end;
  //============================================================================
  procedure TERPFormDocEditor_OnResize(Sender:TObject);
  var
    i          :Integer;
    lkColWidth :Integer;
  begin
    TControl( TComponent(Sender).FindComponent(obj_name_erp_panelleft) ).Width := Trunc(TForm(Sender).ClientWidth * 3 / 5);
    with TDBGridEh(TComponent(Sender).FindComponent(obj_name_erp_data_dbgdata)) do
      begin
      lkColWidth := 0;
      for i:=0 to Columns.Count-1 do
        if(UpperCase(Columns[i].FieldName) <> 'TMC_NAME')then
          lkColWidth := lkColWidth + Columns[i].Width;
      for i:=0 to Columns.Count-1 do
        if(UpperCase(Columns[i].FieldName) = 'TMC_NAME')then
          begin
          Columns[i].Width := Width - lkColWidth - 64;
          break;
          end;
      end;
  end;
  //============================================================================
  procedure TERPFormDocEditor_OnClose(Sender:TObject; var aCloseAction:TCloseAction);
  begin
    TERPFormGrid_CloseDataSets(TComponent(Sender));
    with TxFBTransaction(TComponent(Sender).FindComponent('trTMC')) do
      if InTransaction then Commit;
    aCloseAction := caFree;
  end;
  //============================================================================
  function TERPFormDocEditor_Create(const aJ_ID :string):TAmunhotepForm;
  var
    lkMainMenu    :TMainMenu;
    lkMIMenuMain  :TMenuItem;
    lkPnlLeft     :TxcGradientPanel;
    lkPnlClient   :TxcGradientPanel;
    lkToolBarTMC  :TxcGradientPanelVista;
    lkToolBarData :TxcGradientPanelVista;

    lkPnlLine     :TxcStdPanel;
    lkPnlStd      :TxcStdPanel;

    lkTrTMC       :TxFBTransaction;
    lkDTSTMC      :TxFBDataSet;
    lkDSTMC       :TDataSource;
    lkDSDrvTMC    :TDataSetDriverEh;
    lkMTTMC       :TMemTableEh;
    lkDSMTTMC     :TDataSource;
    lkDBGTMC      :TDBGridEh;

    lkDBlbl       :TxcDBLabel;
    lkTr          :TxFBTransaction;
    lkDTSMain     :TxFBDataSet;
    lkDSMain      :TDataSource;
    lkDTSData     :TxFBDataSet;
    lkDSData      :TDataSource;
    lkDSDrvData   :TDataSetDriverEh;
    lkMTData      :TMemTableEh;
    lkDSMTData    :TDataSource;
    lkDBG         :TDBGridEh;
    lkCol         :TColumnEh;
    lkAct         :TCustomAction;
  begin
    Result := TAmunhotepForm(TERPForm_Create('', ERP_ObjectIcon(ERP_OBJECTTYPE_DOC), ERP_ObjectBitmap(ERP_OBJECTTYPE_DOC), false, @TERPFormDocEditor_OnClose));
    with TERPForm_Settings(Result) do
      begin
      Values[ERP_SETTINGS_BASETYPE] := IntToStr(ERP_OBJECTTYPE_DOC);
      Values[ERP_DATASET_DBKEY    ] := aJ_ID;
      end;
    lkMainMenu  := TMainMenu(Result.FindComponent(obj_name_erp_mainmenu));
    lkMIMenuMain:= CreateTMenuItem(lkMainMenu.Items,obj_name_erp_mimainmenu,'Приход','','', -1, ERP_MENUITEM_FORM_INDEX_BEGIN);

    lkPnlLeft    := CreateTxcGradientPanel(Result,Result,obj_name_erp_panelleft  ,'',alLeft  ,1,1,600,610,xbsNone,gdRightToLeft);
    lkToolBarTMC := CreateTxcGradientPanelVistaToolBar(lkPnlLeft, lkPnlLeft, '', '', alTop, 1, 1, 22, 200, xbsRaized);

    CreateTxFBTransDataSet(Result, obj_name_erp_data_trmain+'TMC', obj_name_erp_data_dtsmain+'TMC', 'DataSource'+obj_name_erp_data_dtsmain+'TMC', ['isc_tpb_read_committed', 'isc_tpb_read', 'isc_tpb_rec_version', 'isc_tpb_nowait'], lkTrTMC, lkDTSTMC, lkDSTMC);
    with lkDTSTMC do
      begin
      AfterOpen   := @TERPFormGrid_OpenDataSetsChilds;
      BeforeClose := @TERPForm_CloseDataSetsChilds;
      end;
    lkDSDrvTMC := TDataSetDriverEh.Create(Result);
    with lkDSDrvTMC do
      begin
      Name             := 'DataSetDriver'+lkDTSTMC.Name;
      ProviderDataSet  := lkDTSTMC;
      ResolveToDataSet := false; 
      end;
    lkMTTMC := TMemTableEh.Create(lkDTSTMC);
    with lkMTTMC do
      begin
      Name             := 'MemoryTable'+lkDTSTMC.Name;
      DataDriver       := lkDSDrvTMC;
      CachedUpdates    := false;
      Filtered         := true;
      FetchAllOnOpen   := true;
      MasterDetailSide := mdsOnSelfEh; 
      AfterOpen        := @TERPForm_OpenDataSetsChilds;
      BeforeClose      := @TERPForm_CloseDataSetsChilds;
      end;
    lkDSMTTMC := TDataSource.Create(lkMTTMC);
    with lkDSMTTMC do
      begin
      Name    := 'DataSource'+lkMTTMC.Name;
      DataSet :=  lkMTTMC;
      end; 
    lkDBGTMC := CreateTDBGridEh(Result,lkPnlLeft,lkDSMTTMC,obj_name_erp_data_dbgdata+'TMC', 1,lkToolBarTMC.Top + lkToolBarTMC.Height,600,400,alClient);
    with lkDBGTMC do
      begin
      AllowedOperations := [];
      Font.Style     := [];
      Options        := Options   + [dgAlwaysShowSelection, dgRowSelect];  
      OptionsEh      := OptionsEh + [dghFixed3D, dghFrozen3D, dghFooter3D, dghAutoSortMarking, dghMultiSortMarking,  
        dghIncSearch, dghHighlightFocus, dghRowHighlight, dghColumnResize, dghColumnMove, dghExtendVertLines, dghHotTrack];
      SortLocal      := true;
      VTitleMargin   := 4;
      FooterRowCount := 0;
      RowLines       := 2;
      RowPanel.Active:= true;
      SumList.Active := true;
      OnDblClick     := @TERPFormDocEditor_act_TMCIns_OnExecute;
      OnKeyDown      := @TERPFormDocEditor_dbgTMC_OnKeyDown;
//      OnGetCellParams:= @TERPFormDocEditor_dbgData_OnGetCellParams;
      Columns.Clear;
      end; 
    lkCol := CreateTColumnEh(lkDBGTMC,'TMC_GROUP_PATH' ,''                 ,'Группа'              ,744,taLeftJustify );
    with lkCol do
      begin
      Font.Color   := Amunhotep.MainForm.StyleManager.Colors.HotTrackBorder;
      Font.Style   := [fsItalic];
      InRowLinePos := 0;
      end;
    lkCol := CreateTColumnEh(lkDBGTMC,'ID'              ,'#0'               ,'Код'                , 48,taRightJustify );
    with lkCol do
      begin
      Font.Style   := [fsBold];
      InRowLinePos := 1;
      end;
    lkCol := CreateTColumnEh(lkDBGTMC,'NAME2'           ,''                 ,'Название для РРО'   ,400,taLeftJustify  );
    with lkCol do
      begin
      InRowLinePos := 1;
      end;
    lkCol := CreateTColumnEh(lkDBGTMC,'ARTICLE'         ,''                 ,'Артикул'            , 70,taLeftJustify  );
    with lkCol do
      begin
      InRowLinePos := 1;
      end;
    lkCol := CreateTColumnEh(lkDBGTMC,'BARCODE'        ,''                  ,'Штрихкод'          , 126,taLeftJustify ); 
    with lkCol do
      begin
      Font.Style   := [fsBold];
      InRowLinePos := 1;
      end;
    lkCol := CreateTColumnEh(lkDBGTMC,'EDIZM_SHORT_NAME',''                 ,'Ед.Изм.'            , 40,taRightJustify );
    with lkCol do
      begin
      Color        := $C0FFC0;
      InRowLinePos := 1;
      end;
    lkCol := CreateTColumnEh(lkDBGTMC,'PRICE'           ,'# ### ### ##0.00' ,'Цена'              , 56,taRightJustify ); 
    with lkCol do
      begin
      Color        := $FFFFC0;
      Font.Style   := [fsBold];
      InRowLinePos := 1;
      end;
    ERP_DBGridEh_StdActions_Create(lkDBGTMC, [erpGrid, erpGridNavigation, erpGridExport], lkToolBarTMC, nil);

    // client panel
    lkPnlClient  := CreateTxcGradientPanel(Result,Result,obj_name_erp_panelClient,'',alClient,lkPnlLeft.Left+lkPnlLeft.Width+8,1,600,400,xbsNone,gdRightToLeft);
    lkToolBarData:= CreateTxcGradientPanelVistaToolBar(lkPnlClient, lkPnlClient, '', '', alTop, 1, 10, 22, 200, xbsRaized);

    CreateTxFBTransDataSet(Result, obj_name_erp_data_trmain, obj_name_erp_data_dtsmain, 'DataSource'+obj_name_erp_data_dtsmain, ['isc_tpb_read_committed', 'isc_tpb_write', 'isc_tpb_rec_version', 'isc_tpb_nowait'], lkTr, lkDTSMain, lkDSMain);
    with lkDTSMain do
      begin
      AfterOpen   := @TERPFormDocEditor_dtsData_AfterOpen;
      BeforeClose := @TERPFormDocEditor_dtsData_BeforeClose;
      end;
    lkDTSData := TxFBDataSet.Create(lkDTSMain);
    with lkDTSData do
      begin
      Name            := obj_name_erp_data_dtsdata;
      Transaction     := lkTr;
      DataSource      := lkDSMain;
      SelectSQL.Text  := 'SELECT P.* FROM PROC$D_GET_1000014(?ID) P ORDER BY P.ID ';
      RefreshSQL.Text := 'SELECT P.* FROM PROC$D_GET_1000014(?J_ID) P WHERE (P.ID = ?ID)';
      ModifySQL.Text  := 
        'UPDATE TABL$D_1000014 D SET '+SQLCRLF+
        '   D.PRICE = ?PRICE '+SQLCRLF+
        '  ,D.QUANT = ?QUANT '+SQLCRLF+
        '  ,D.NAME  = ?NAME '+SQLCRLF+
        'WHERE (D.ID = ?ID) ';
      AfterOpen       := @TERPFormGrid_OpenDataSetsChilds;
      BeforeClose     := @TERPForm_CloseDataSetsChilds;
      end;
    lkDSData := TDataSource.Create(lkDTSData);
    with lkDSData do
      begin
      Name    := 'DataSource'+lkDTSData.Name;
      DataSet := lkDTSData;
      end;  
    lkDSDrvData := TDataSetDriverEh.Create(Result);
    with lkDSDrvData do
      begin
      Name             := 'DataSetDriver'+lkDTSData.Name;
      ProviderDataSet  := lkDTSData;
      ResolveToDataSet := True; 
      end;
    lkMTData := TMemTableEh.Create(lkDTSData);
    with lkMTData do
      begin
      Name             := 'MemoryTable'+lkDTSData.Name;
      DataDriver       := lkDSDrvData;
      CachedUpdates    := false;
      Filtered         := true;
      FetchAllOnOpen   := true;
      MasterDetailSide := mdsOnSelfEh; 
      AfterOpen        := @TERPForm_OpenDataSetsChilds;
      BeforeClose      := @TERPForm_CloseDataSetsChilds;
      end;
    lkDSMTData := TDataSource.Create(lkMTData);
    with lkDSMTData do
      begin
      Name    := 'DataSource'+lkMTData.Name;
      DataSet :=  lkMTData;
      end; 
    lkDBG := CreateTDBGridEh(Result,lkPnlClient,lkDSMTData,obj_name_erp_data_dbgdata, 1,600,200,200,alClient);
    with lkDBG do
      begin
      AllowedOperations := [alopUpdateEh, alopDeleteEh];
      IndicatorOptions  := [gioShowRowIndicatorEh, gioShowRowselCheckboxesEh];  
      Font.Style     := [];
      Options        := Options   + [dgMultiSelect, dgAlwaysShowSelection];  
      OptionsEh      := OptionsEh + [dghFixed3D, dghFrozen3D, dghFooter3D, dghAutoSortMarking, dghMultiSortMarking,  
        dghIncSearch, dghHighlightFocus, dghRowHighlight, dghColumnResize, dghColumnMove, dghExtendVertLines, dghHotTrack];
      SortLocal      := true;
      VTitleMargin   := 4;
      FooterRowCount := 1;
      SumList.Active := true;
      OnKeyDown      := @TERPFormDocEditor_dbgData_OnKeyDown;
      OnGetCellParams:= @TERPFormDocEditor_dbgData_OnGetCellParams;
      Columns.Clear;
      end; 
//    lkCol := CreateTColumnEh(lkDBG,'TMC_ID'     ,'#0'               ,'Код'         , 60,taRightJustify);
    lkCol := CreateTColumnEh(lkDBG,'TMC_NAME'   ,''                 ,'Название',200,taLeftJustify );
    with lkCol do
      begin
      Color         := lkDBG.FixedColor + $202020;
      ReadOnly      := True;
      with Footer do
        begin
        Color         := lkDBG.FixedColor;
        DisplayFormat := '';
        Alignment     := lkCol.Alignment;
        ValueType     := fvtStaticText;
        Value         := 'ИТОГО';
        end;
      end;
    lkCol := CreateTColumnEh(lkDBG,'EDIZM_SHORT',''                 ,'Ед.'         , 40,taCenter );
    with lkCol do
      begin
      Color         := lkDBG.FixedColor + $202020;
      ReadOnly      := True;
      end;
    lkCol := CreateTColumnEh(lkDBG,'PRICE'      ,'# ### ### ##0.00' ,'Цена'        , 60,taRightJustify);
    with lkCol do
      begin
      Font.Style := [fsBold];
      end;
    lkCol := CreateTColumnEh(lkDBG,'QUANT'      ,'# ### ### ##0.000','кол'         , 60,taRightJustify);
    with lkCol do
      begin
      Font.Style := [fsBold];
      with Footer do
        begin
        Color         := lkCol.Color;
        DisplayFormat := lkCol.DisplayFormat;
        Alignment     := lkCol.Alignment;
        FieldName     := lkCol.FieldName;
        ValueType     := fvtSum;
        end;
      end;
    lkCol := CreateTColumnEh(lkDBG,'TOTAL'      ,'# ### ### ##0.00' ,'Сумма'       ,72,taRightJustify);
    with lkCol do
      begin
      Color         := lkDBG.FixedColor + $202020;
      ReadOnly      := True;
      with Footer do
        begin
        Color         := lkCol.Color;
        DisplayFormat := lkCol.DisplayFormat;
        Alignment     := lkCol.Alignment;
        FieldName     := lkCol.FieldName;
        ValueType     := fvtSum;
        end;
      end;
    ERP_DBGridEh_StdActions_Create(lkDBG, [erpGrid, erpGridNavigation, erpGridExport], lkToolBarData, nil);

    lkPnlLine := CreateTxcStdPanel(Result, lkPnlClient, '', '', alTop, 1, 1, DefaultButtonHeight+2, DefaultButtonWidth, xbsNone);
    lkPnlStd  := TERPFormDocEditor_ItemNew(Result, lkPnlLine, 
      'p_CS', '', '', '', '', 
      alClient, taLeftJustify, tlCenter, 1, 1, DefaultButtonHeight, DefaultButtonWidth, xbsNone, 
      MaterialColor(4), @TERPFormDocEditor_act_CS_OnExecute, false, 14
    );
    lkDBlbl := CreateTxcDBLabel(lkPnlStd, lkPnlStd, lkDSMain, 'CS_NAME'    , 1, 1, lkPnlStd.Height, lkPnlStd.Width, alClient, taLeftJustify);
    with lkDBlbl do
      begin
      Font.Color  := $FFFFFF;
      Font.Size   := 12;
      Font.Style  := [fsBold];
      WordWrap    := True;
      Transparent := True;
      TextStyle   := tsRecessed;
      OnClick     := @TERPFormDocEditor_itmLblClick;
      OnMouseDown := @TERPFormDocEditor_itmLblMouseDown;
      OnMouseUp   := @TERPFormDocEditor_itmLblMouseUp;
      OnMouseMove := @TERPFormDocEditor_itmLblMouseMove;
      OnMouseLeave:= @TERPFormDocEditor_itmLblMouseLeave;
      end;

    
    lkPnlLine := CreateTxcStdPanel(Result, lkPnlClient, '', '', alBottom, 1, lkPnlClient.Height - (DefaultButtonHeight * 1), DefaultButtonHeight+2, DefaultButtonWidth, xbsNone);
    lkPnlStd  := TERPFormDocEditor_ItemNew(Result, lkPnlLine, 
      'p_Commit', 'ПРОВЕСТИ', 'Провести документ', '', '', 
      alLeft, taCenter, tlCenter, 1, 1, DefaultButtonHeight, DefaultButtonWidth, xbsNone, 
      MaterialColor(1), @TERPFormDocEditor_act_Commit_OnExecute, true, 14
    ); lkPnlStd.Tag := 0;

    lkPnlStd  := TERPFormDocEditor_ItemNew(Result, lkPnlLine, 
      'Pnl_Print', 'ПЕЧАТЬ', 'Печать документ', '', '', 
      alLeft, taCenter, tlCenter, 20, 1, DefaultButtonHeight, DefaultButtonWidth, xbsNone, 
      MaterialColor(3), @TERPFormDocEditor_act_Print_OnExecute, true, 14
    ); lkPnlStd.Tag := 0;

    lkPnlStd  := TERPFormDocEditor_ItemNew(Result, lkPnlLine, 
      'p_TMCDEL', 'Удалить', 'Удалить ТМЦ из счёта', '', '', 
      alRight, taCenter, tlCenter, (DefaultButtonWidth * 5)+1, 1, DefaultButtonHeight, (DefaultButtonHeight*2), xbsNone, 
      MaterialColor(1), @TERPFormDocEditor_act_TMCDel_OnExecute, true, 14
    );

    lkAct := TERPForm_CreateAction2(Result,obj_name_erp_actviewrefresh ,msg_erp_actviewrefresh,msg_erp_actviewrefresh_hint ,SHORTCUT_DATA_REFRESH,0,170,@TERPFormDocEditor_actRefresh_OnExecute       ,nil                                   ,nil,-1,lkMIMenuMain);
    lkAct := TERPForm_CreateAction2(Result,obj_name_erp_actdel         ,'Удалить'             ,'Удалить Т.М.Ц из документа','Ctrl+Del'           ,0,177,@TERPFormDocEditor_act_TMCDel_OnExecute       ,@TERPFormDocEditor_actCommit_OnUpdate ,nil,-1,lkMIMenuMain);
    lkAct := TERPForm_CreateAction2(Result,obj_name_erp_actcommit      ,msg_erp_actcommit     ,'Провести документ'         ,SHORTCUT_DOC_COMMIT  ,0,298,@TERPFormDocEditor_act_Commit_OnExecute       ,@TERPFormDocEditor_actCommit_OnUpdate ,nil,-1,lkMIMenuMain);
    lkAct.Tag := 0;
    lkAct := TERPForm_CreateAction2(Result,obj_name_erp_actprintdefault,msg_erp_actprintitem  ,msg_erp_actprintitem_hint   ,SHORTCUT_PRINT       ,0,105,@TERPFormDocEditor_act_Print_OnExecute        ,nil                                   ,nil,-1,lkMIMenuMain);

    Amunhotep.MainForm.xcMenu.AddMenu(lkMainMenu); lkMainMenu.OwnerDraw := true;
    Result.Menu := lkMainMenu;
    Result.OnResize := @TERPFormDocEditor_OnResize;
    TERPFormDocEditor_RefreshViewTMC(Result);
    TERPFormDocEditor_RefreshView(Result);    // refresh doc
    TERPFormDocEditor_OnResize(Result);       // refresh client area repaint
  end;
  //============================================================================
var
  lkJ_ID :string;
begin
  MaterialColors[0] := $3643F4;  //$F44336;
  MaterialColors[1] := $631EE9;  //$E91E63;
  MaterialColors[2] := $B73A67;  //$673AB7;
  MaterialColors[3] := $F39621;  //$2196F3;
  MaterialColors[4] := $889600;  //$009688;
  MaterialColors[5] := $2257FF;  //$FF5722;
  MaterialColors[6] := $B0279C;  //$9C27B0;
  MaterialColors[7] := $485579;  //$795548;
  MaterialColors[8] := $B5513F;  //$3F51B5;
  MaterialColors[9] := $8B7D60;  //$607D8B;
  lkJ_ID := GetGlobalVariable('J_ID');
  WriteLn(lkJ_ID); 

  TERPFormDocEditor_Create(GetGlobalVariable('J_ID'));
end.
